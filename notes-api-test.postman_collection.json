{
	"info": {
		"_postman_id": "99d32a64-eb71-4c5e-8fc4-8a4404a6db3a",
		"name": "Note Dicoding Testing API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39797003"
	},
	"item": [
		{
			"name": "Create New Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test('Content-Type should include application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - status, message, and data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.data).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"NoteId is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data.noteId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"NoteId should be a non-empty string\");\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							" \r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							" \r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"});\r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							" \r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							" \r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\r\n        \"Android\",\r\n        \"Web\"\r\n    ],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Cek status respon harus berkode 200 (OK)\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Cek type respon harus berupa json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"// Cek isi response haru berupa object\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"// Cek isi body response harus sesuai dengan propertinya\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"// Cek isi data response harus memiliki paling tidak satu item\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('notes');\r",
							"   pm.expect(data.notes).to.be.an('array');\r",
							"   pm.expect(data.notes).lengthOf.at.least(1);\r",
							"}); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Cek status respon harus berkode 200 (OK)\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Cek type respon harus berupa json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"// Cek isi response haru berupa object\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"// Cek isi body response harus sesuai dengan propertinya\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"// Cek body response punya properti note berupa objek\r",
							"pm.test('response body data should contain note object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('note');\r",
							"   pm.expect(data.note).to.be.an('object');\r",
							"}); \r",
							"\r",
							"// Cek objek note memiliki properti (tittle, id, body dan tags)\r",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { note } } = responseJson;\r",
							"    \r",
							"    const expectedId = pm.environment.get('noteId');\r",
							"    const expectedTitle = 'Catatan A';\r",
							"    const expectedTags = ['Android', 'Web'];\r",
							"    const expectedBody = 'Isi dari catatan A';\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('id');\r",
							"    pm.expect(note.id).to.equals(expectedId);\r",
							"    pm.expect(note).to.have.ownProperty('title');\r",
							"    pm.expect(note.title).to.equals(expectedTitle);\r",
							"    pm.expect(note).to.have.ownProperty('tags');\r",
							"    pm.expect(note.tags).to.eql(expectedTags);\r",
							"    pm.expect(note).to.have.ownProperty('body');\r",
							"    pm.expect(note.body).to.equal(expectedBody);\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Updated Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Cek status respon harus berkode 200 (OK)\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Cek type respon harus berupa json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"// Cek isi response haru berupa object\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"// Cek isi body response update harus sesuai dengan propertinya\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"});\r",
							"\r",
							"// Cek hasil permintaan response update apakah ada error tidaknya \r",
							"pm.test('when request the updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('then the updated note should contain the latest data', () => {\r",
							"                const responseJson = response.json();\r",
							"                const { data: { note } } = responseJson;\r",
							" \r",
							"                const expectedTitle = 'Catatan A Revised';\r",
							"                const expectedTags = ['Android', 'Web'];\r",
							"                const expectedBody = 'Isi dari Catatan A Revised';\r",
							" \r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Specific Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Cek status respon harus berkode 200 (OK)\r",
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Cek type respon harus berupa json\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"// Cek isi response haru berupa object\r",
							"pm.test('response body should an object', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"// Cek isi body response delete harus sesuai dengan propertinya\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"});\r",
							"\r",
							"// Cek hasil permintaan response delete apakah ada error tidaknya \r",
							"pm.test('when request the deleted note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}